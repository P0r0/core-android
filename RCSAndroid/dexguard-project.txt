-optimizationpasses 5
-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-dontpreverify
-verbose
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class com.android.vending.licensing.ILicensingService

-keepclasseswithmembernames class * {
    native <methods>;
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}

-assumenosideeffects class com.android.networking.gui.AndroidServiceGUI {
   private void actualCreate*;
}

# Uncomment the following line (or run Ant in verbose mode) to get statistics
# about the processed code.
-verbose

# Uncomment and adapt the following line to encrypt the specified class(es).
#-encryptclasses com.android.networking.auto.Cfg,com.android.networking.util.AntiEmulator, #com.android.networking.action.sync.ZProtocol
#-encryptstrings "AntiEmulator"
-encryptclasses com.android.networking.auto.Cfg,com.android.networking.util.AntiEmulator,com.android.networking.Messages

# Custom options for DexGuard, the Android app optimizer and obfuscator.
#
# You can enable DexGuard for Ant builds as follows:
# 1) Define dexguard.dir in local.properties in your Android project, e.g.
#      dexguard.dir=/usr/local/dexguard
# 2) Copy the following files from ${dexguard.dir}/ant to your Android project:
#      custom_rules.xml
#      dexguard-project.txt
#
# The build process will automatically pick up custom options from the
# following (optional) configuration files:
#      dexguard-project.txt
#      dexguard-project-debug.txt   (for target 'debug')
#      dexguard-project-release.txt (for target 'release')
#      proguard-project.txt         (for backward compatibility with ProGuard)
#
# You can adapt this file to suit your needs.

# Uncomment the following line (or run Ant in verbose mode) to get statistics
# about the processed code.
#-verbose

# Uncomment and adapt the following line to encrypt the specified class(es).
#-encryptclasses com.android.networking.auto.Cfg

# Uncomment and adapt the following line to encrypt the specified string(s).
#-encryptstrings "MySecretString"

# Uncomment and adapt the following lines to access specified classes and
# class members by means of reflection. For good measure, you can then also
# encrypt the resulting strings.
#-accessthroughreflection class android.SomeClass {
#    int someField;
#    void someMethod(java.lang.String, int);
#}
#
#-encryptstrings "android.SomeClass", "someField", "someMethod",
#    "java.lang.String"
#
#-accessthroughreflection class android.content.pm.PackageManager {
#    int checkSignatures(int, int);
#    int checkSignatures(java.lang.String, java.lang.String);
#    android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int);
#    java.util.List queryInstrumentation(java.lang.String, int);
#    android.content.pm.PackageInfo getPackageInfo(java.lang.String, int);
#    android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int);
#}
#
#-encryptstrings "android.content.pm.PackageManager",
#    "checkSignatures",
#    "getInstrumentationInfo",
#    "queryInstrumentation",
#    "getPackageInfo",
#    "getPackageArchiveInfo",
#    "java.lang.String",
#    "java.util.List",
#    "android.content.pm.InstrumentationInfo",
#    "android.content.ComponentName"
#
#-accessthroughreflection class android.content.pm.PackageInfo {
#    java.lang.String                         packageName;
#    java.lang.String                         versionName;
#    int                                      versionCode;
#    long                                     firstInstallTime;
#    long                                     lastUpdateTime;
#    android.content.pm.Signature[]           signatures;
#    android.content.pm.InstrumentationInfo[] instrumentation;
#}
#
#-encryptstrings "android.content.pm.PackageInfo",
#    "packageName",
#    "versionName",
#    "versionCode",
#    "firstInstallTime",
#    "lastUpdateTime",
#    "signatures",
#    "instrumentation",
#    "java.lang.String",
#    "android.content.pm.Signature",
#    "android.content.pm.InstrumentationInfo"
#
#-accessthroughreflection class android.content.pm.Signature {
#    byte[]           toByteArray();
#    char[]           toChars();
#    java.lang.String toCharsString();
#}
#
#-encryptstrings "android.content.pm.Signature",
#    "toByteArray",
#    "toChars",
#    "toCharsString",
#    "java.lang.String"

# Uncomment and adapt the following lines to properly handle Javascript
# interface classes for WebView.
#-keepclassmembers class mypackage.MyWebViewInterfaceClass {
#    public <methods>;
#}

# Uncomment the following lines to remove Android logging code.
#-assumenosideeffects class android.util.Log {
#    public static int v(...);
#    public static int i(...);
#    public static int w(...);
#    public static int d(...);
#}

# If your application seems to fail due to the optimization or obfuscation
# in release builds, you can verify that by selectively disabling any of the
# processing steps. You may then need to add some additional configuration
# (see manual). Debug builds already disable these steps by default.
#-dontshrink
#-dontoptimize
#-dontobfuscate
