# DexGuard's default settings are fine for this sample application.

# We'll just display some more statistics about the processed code.
-verbose

# Encrypt various strings from the AdMob library, including our
# publisher ID.
-encryptstrings
    "a14d91b10f12454",
    "*AdMob*",
    "Ads by Google"

# Hide use of the main AdView by accessing it through reflection.
-accessthroughreflection class com.google.ads.AdView {
    <init>(...);
    void destroy();
    boolean isReady();
    boolean isRefreshing();
    void loadAd(com.google.ads.AdRequest);
    void setAdListener(com.google.ads.AdListener);
    void stopLoading();
}

# We currently explicitly have to tell DexGuard to keep the constructors when
# they are invoked through reflection.
-keepclassmembers class com.google.ads.AdView {
    <init>(...);
}

# We'll also encrypt the resulting strings, adding another layer of obfuscation.
# The obfuscation step already obfuscates the method names.
-encryptstrings "com.google.ads.AdView"

# Remove Android logging code (including errors, but you can change that if you
# wish).
-assumenosideeffects class android.util.Log {
    public static boolean isLoggable(java.lang.String, int);
    public static int v(...);
    public static int i(...);
    public static int w(...);
    public static int d(...);
    public static int e(...);
    public static java.lang.String getStackTraceString(java.lang.Throwable);
}

# Remove Google AdMob assertion checks.
-assumenosideeffects class com.google.ads.util.a extends java.lang.Object{
    static void <clinit>();
    public static void a(boolean);
    public static void a(boolean, java.lang.String);
    public static void b(boolean);
    public static void b(boolean, java.lang.String);
    public static void a(java.lang.Object);
    public static void b(java.lang.Object);
    public static void a(java.lang.Object, java.lang.Object);
    public static void a(java.lang.String);
    private static void c(boolean, java.lang.String);
}

