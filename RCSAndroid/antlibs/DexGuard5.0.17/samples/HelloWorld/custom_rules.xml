<?xml version="1.0" encoding="UTF-8"?>
<!--

Ant rules for DexGuard, the Android app optimizer and obfuscator.

You can enable DexGuard for Ant builds as follows:
1) Define dexguard.dir in local.properties in your Android project, e.g.
     dexguard.dir=/usr/local/dexguard
2) Copy the following files from ${dexguard.dir}/ant to your Android project:
     custom_rules.xml
     dexguard-project.txt

The build process will automatically pick up custom options from the
following (optional) configuration files:
     dexguard-project.txt         (for all targets)
     dexguard-project-debug.txt   (for target 'debug')
     dexguard-project-release.txt (for target 'release')
     proguard-project.txt         (for backward compatibility with ProGuard)

-->

<project name="dexguard_rules" default="debug">

    <fail message="Please define 'dexguard.dir' in the file 'local.properties'"
        unless="dexguard.dir" />

    <fail message="Please correct 'dexguard.dir' in the file 'local.properties' ('${dexguard.dir}' does not exist)">
        <condition><not><resourceexists>
            <file file="${dexguard.dir}"/>
        </resourceexists></not></condition>
    </fail>

    <fail message="Please correct 'sdk.dir' in the file 'local.properties' ('${sdk.dir}' does not exist)">
        <condition><not><resourceexists>
            <file file="${sdk.dir}"/>
        </resourceexists></not></condition>
    </fail>

    <taskdef resource="com/saikoa/dexguard/ant/task.properties"
        classpath="${dexguard.dir}/lib/dexguard.jar" />

    <macrodef name="dexguard-package-helper">
        <element name="extra-jars" optional="yes" />
        <sequential>
            <property name="obfuscate.absolute.dir"
                location="${out.absolute.dir}/proguard" />
            <property name="out.native.libs.absolute.dir"
                location="${out.absolute.dir}/native" />
            <mkdir dir="${obfuscate.absolute.dir}" />
            <mkdir dir="${out.native.libs.absolute.dir}" />
            <copy todir="${out.native.libs.absolute.dir}">
                <fileset dir="${native.libs.absolute.dir}">
                    <include name="*/*.so" />
                </fileset>
                <globmapper from="*" to="lib/*" />
            </copy>
            <dexguard
                verbose="${verbose}"
                keystore="${key.store}"
                keystorepassword="${key.store.password}"
                keyalias="${key.alias}"
                keypassword="${key.alias.password}"
                printseeds="${obfuscate.absolute.dir}/seeds.txt"
                printusage="${obfuscate.absolute.dir}/usage.txt"
                printmapping="${obfuscate.absolute.dir}/mapping.txt"
                configuration="${dexguard.dir}/lib/dexguard-${build.target}.pro">
                <injar path="${out.classes.absolute.dir}"     filter="**.class" />
                <injar refid="project.all.jars.path"          filter="**.class,lib/*/*.so,!**.so,!CVS/**,!.svn/**,!SCCS/**,!META-INF/**,!**.aidl,!**.rs,!**.rsh,!**.d,!**.java,!**.scala,!**.scc,!**.swp,!**thumbs.db,!**picasa.ini,!**package.html,!**overview.html,!**.AIDL,!**.RS,!**.RSH,!**.D,!**.JAVA,!**.SCALA,!**.SCC,!**.SWP,!**THUMBS.DB,!**PICASA.INI,!**PACKAGE.HTML,!**OVERVIEW.HTML" />
                <injar path="${out.native.libs.absolute.dir}" filter="lib/*/*.so" />
                <injar path="${out.absolute.dir}/${resource.package.file.name}" />
                <extra-jars />
                <outjar path="${out.final.file}" />
                <libraryjar refid="project.target.class.path" />
                <configuration file="proguard-project.txt" />
                <configuration file="dexguard-project.txt" />
                <configuration file="dexguard-project-${build.target}.txt" />
            </dexguard>
        </sequential>
    </macrodef>

    <target name="-package-resources" depends="-crunch">
        <do-only-if-not-library elseText="Library project: do not package resources..." >
            <aapt executable="${aapt}"
                command="package"
                versioncode="${version.code}"
                versionname="${version.name}"
                debug="${build.is.packaging.debug}"
                manifest="AndroidManifest.xml"
                assets="${asset.absolute.dir}"
                androidjar="${project.target.android.jar}"
                apkfolder="${out.absolute.dir}"
                nocrunch="${build.packaging.nocrunch}"
                resourcefilename="${resource.package.file.name}"
                resourcefilter="${aapt.resource.filter}"
                libraryResFolderPathRefid="project.library.res.folder.path"
                libraryPackagesRefid="project.library.packages"
                previousBuildType="${build.last.target}"
                buildType="${build.target}"
                ignoreAssets="${aapt.ignore.assets}">
                <res path="${out.res.absolute.dir}" />
                <res path="${resource.absolute.dir}" />
            </aapt>
        </do-only-if-not-library>
    </target>

    <target name="-package" depends="-compile, -post-compile, -package-resources">
        <do-only-if-not-library elseText="Library project: do not package apk..." >
            <if condition="${build.is.instrumented}">
                <then>
                    <dexguard-package-helper>
                        <extra-jars>
                            <injar path="${emma.dir}/emma_device.jar" />
                        </extra-jars>
                    </dexguard-package-helper>
                </then>
                <else>
                    <dexguard-package-helper />
                </else>
            </if>
        </do-only-if-not-library>
    </target>

    <target name="release"    depends="-set-release-mode, -release-prompt-for-password, -package, -post-package, -post-build" />
    <target name="debug"      depends="-set-debug-mode, -set-debug-files, -package, -post-package, -post-build" />
    <target name="instrument" depends="-set-instrumented-mode, debug" />
</project>
